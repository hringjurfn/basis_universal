/**
 * \file emscripten.c
 * Emscripten example of using the single-file \c zstddeclib. Draws a rotating
 * textured quad with data from the in-line Zstd compressed DXT1 texture (DXT1
 * being hardware compression, further compressed with Zstd).
 * \n
 * Compile using:
 * \code
 *	export CC_FLAGS="-Wall -Wextra -Werror -Os -g0 -flto --llvm-lto 3 -fno-exceptions -fno-rtti -lGL -DNDEBUG=1"
 *	export EM_FLAGS="-s ENVIRONMENT=web -s WASM=1 --shell-file shell.html --closure 1"
 *	emcc $CC_FLAGS $EM_FLAGS -o out.html emscripten.cpp
 * \endcode
 */

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <emscripten/emscripten.h>
#include <emscripten/html5.h>

#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>

#include "../basisutranslib.cpp"

using namespace basist;

static etc1_global_selector_codebook* globalCodebook = NULL;

//************************* Test Data (DXT texture) **************************/

/**
 * Basis Universal compressed 256x256 texture source.
 * \n
 * See \c testcard.png for the original.
 */
static uint8_t const srcBasis[] = {
	0x73, 0x42, 0x13, 0x00, 0x4d, 0x00, 0x66, 0xbb, 0x6c, 0x0d, 0x00, 0x00,
	0x1f, 0x4f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x84, 0x00, 0x64, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00,
	0x01, 0x01, 0x99, 0x01, 0x00, 0x00, 0x94, 0x02, 0x00, 0x2d, 0x04, 0x00,
	0x00, 0xb8, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x01, 0x40, 0x00, 0x40, 0x00, 0xe5, 0x04, 0x00, 0x00, 0xd4, 0x08,
	0x00, 0x00, 0x06, 0xda, 0x20, 0x40, 0x2c, 0x80, 0x41, 0x10, 0x04, 0xa0,
	0xe0, 0x3d, 0xd2, 0x45, 0x5b, 0x53, 0x26, 0x35, 0xe1, 0x43, 0x0e, 0x04,
	0x78, 0x04, 0x30, 0x0c, 0x82, 0x30, 0xf0, 0x4a, 0xa1, 0x08, 0xb5, 0x91,
	0x2c, 0xd3, 0x3d, 0x86, 0x3d, 0x10, 0xe0, 0x01, 0x00, 0x31, 0x08, 0x82,
	0xc0, 0x67, 0xe6, 0x46, 0xe7, 0x6e, 0xab, 0x4e, 0x0a, 0x11, 0x01, 0x01,
	0x98, 0x00, 0x00, 0x00, 0x80, 0x20, 0x08, 0x80, 0xf0, 0x3a, 0xbd, 0x01,
	0x1d, 0x80, 0x5d, 0x3d, 0xb3, 0xea, 0x60, 0x61, 0x0c, 0x6d, 0xf0, 0xfe,
	0x7b, 0xd1, 0xae, 0x13, 0xc8, 0xd0, 0x2c, 0x00, 0x90, 0x48, 0xa2, 0x01,
	0x12, 0x24, 0xc8, 0x40, 0xa9, 0x3a, 0x4d, 0x84, 0x80, 0x34, 0x01, 0x69,
	0x02, 0x92, 0xa4, 0x0b, 0x48, 0x8d, 0x2e, 0x09, 0xd5, 0xf5, 0xd7, 0x3d,
	0x9e, 0x86, 0xf4, 0x7c, 0xea, 0x7d, 0x7d, 0x26, 0xd7, 0x51, 0x9a, 0x7f,
	0x8c, 0x1e, 0x92, 0xb7, 0xf3, 0x5c, 0x36, 0x1f, 0xfe, 0x3e, 0x37, 0xd7,
	0x7f, 0x6f, 0x7d, 0xe6, 0x6c, 0x47, 0xcc, 0xec, 0xf6, 0xde, 0x2f, 0x22,
	0x56, 0x44, 0x26, 0x6a, 0x7f, 0x0f, 0x96, 0x31, 0x46, 0xdd, 0xbd, 0x11,
	0xf1, 0x55, 0xf5, 0xcc, 0x2c, 0xee, 0x4e, 0x0d, 0x33, 0x6f, 0xef, 0x7d,
	0xa4, 0x3b, 0x95, 0xeb, 0x66, 0xfc, 0xce, 0x06, 0x96, 0xca, 0x74, 0xee,
	0x5f, 0xd4, 0xdd, 0x5e, 0xcf, 0x43, 0x5f, 0xaf, 0x8c, 0x2f, 0xe1, 0x41,
	0x70, 0x7d, 0xd1, 0x46, 0x0e, 0x54, 0x3d, 0x80, 0xe6, 0xd2, 0xcd, 0x5f,
	0x5c, 0xa7, 0xd4, 0x5b, 0x36, 0xb2, 0x8d, 0xd6, 0xc0, 0x42, 0x04, 0x84,
	0xa0, 0xbc, 0x65, 0x4d, 0x01, 0x6c, 0x87, 0xed, 0x15, 0x79, 0x67, 0x6d,
	0x21, 0x4a, 0x42, 0x48, 0x51, 0x9f, 0xbb, 0xda, 0xd5, 0xa1, 0x8f, 0xda,
	0x8c, 0xdc, 0x9a, 0xf3, 0xf4, 0x91, 0xfd, 0x13, 0xb4, 0x5e, 0x59, 0x3f,
	0x05, 0xcc, 0x6c, 0xbf, 0xb7, 0xab, 0xd6, 0xb6, 0xfc, 0xe7, 0xac, 0xd6,
	0xfa, 0xd3, 0x6c, 0xcc, 0xea, 0xce, 0xd6, 0x14, 0xa2, 0x53, 0x66, 0x5c,
	0x2b, 0xaa, 0x65, 0xa3, 0x35, 0x85, 0x84, 0xbc, 0x81, 0x81, 0x07, 0x03,
	0xc3, 0x00, 0x17, 0xfb, 0x27, 0x04, 0x2d, 0x29, 0x08, 0x04, 0xa2, 0xaf,
	0x08, 0xe8, 0x07, 0xe6, 0x7c, 0x68, 0x5d, 0x55, 0x00, 0x00, 0xf0, 0xdf,
	0x39, 0xf7, 0xdc, 0x98, 0xbc, 0xde, 0xd0, 0x93, 0xf8, 0x1a, 0xd2, 0x36,
	0x94, 0x4b, 0x9a, 0xea, 0x1b, 0x32, 0x44, 0x5d, 0x02, 0x2e, 0xe7, 0x41,
	0x28, 0x56, 0x29, 0xbe, 0x42, 0xaa, 0x05, 0x97, 0xe2, 0x1f, 0x70, 0x10,
	0xb4, 0xe8, 0x07, 0xb8, 0x14, 0x87, 0x20, 0x0e, 0xef, 0x49, 0xad, 0x28,
	0x1d, 0x9e, 0xd0, 0x21, 0x64, 0x2a, 0x74, 0xe9, 0x78, 0x5b, 0x45, 0xc4,
	0x0e, 0x16, 0xfa, 0x05, 0x1e, 0xba, 0x74, 0xec, 0x07, 0xa8, 0xba, 0xaa,
	0xaa, 0x6a, 0x01, 0x0a, 0xc6, 0x21, 0x04, 0x29, 0xa5, 0x94, 0x73, 0xce,
	0xa5, 0x94, 0x32, 0x18, 0x0c, 0x06, 0x6d, 0xdb, 0xb6, 0x7b, 0x38, 0x07,
	0x5d, 0xd7, 0xa1, 0x12, 0x63, 0x38, 0x06, 0x8e, 0x63, 0x8c, 0x2a, 0xe0,
	0x24, 0x20, 0x02, 0x11, 0x41, 0x45, 0xa4, 0x8a, 0x2a, 0x15, 0x50, 0x35,
	0x68, 0x34, 0x68, 0x9a, 0xa6, 0x81, 0x06, 0x9a, 0x10, 0xea, 0x95, 0x94,
	0x52, 0x9a, 0x4f, 0xca, 0x97, 0x1a, 0x73, 0x6e, 0x14, 0xca, 0x33, 0x85,
	0x3b, 0x18, 0x15, 0x0a, 0x29, 0x06, 0x42, 0x8c, 0x89, 0x00, 0x01, 0x31,
	0x22, 0x40, 0x20, 0xc5, 0x18, 0x08, 0x31, 0x51, 0xba, 0xa2, 0x74, 0xa5,
	0x74, 0x78, 0x81, 0x3b, 0x14, 0xb5, 0x40, 0xa8, 0xfc, 0x14, 0x83, 0x9f,
	0x11, 0x14, 0x18, 0x33, 0x9e, 0x12, 0xc6, 0x3c, 0x0b, 0x4a, 0xbe, 0x50,
	0xba, 0x4c, 0x29, 0xb9, 0xcd, 0xb9, 0xcd, 0xa5, 0x90, 0xbb, 0x32, 0x2f,
	0x85, 0x9e, 0x0c, 0x85, 0x5e, 0xe9, 0x91, 0xe9, 0x9d, 0xe8, 0xca, 0x75,
	0x60, 0xa6, 0x08, 0x63, 0x4c, 0xc7, 0x8c, 0x03, 0xe1, 0x19, 0xb3, 0x49,
	0x41, 0x37, 0x55, 0x4c, 0x64, 0xd4, 0x18, 0x22, 0x08, 0x3b, 0x84, 0xb3,
	0x81, 0x18, 0xec, 0x70, 0x1e, 0x5b, 0x2b, 0x2c, 0xad, 0x13, 0x04, 0x04,
	0x19, 0x35, 0xce, 0xec, 0x10, 0xce, 0xee, 0x08, 0xd1, 0x79, 0x56, 0xb6,
	0x58, 0xaf, 0xab, 0xe8, 0x9a, 0xf1, 0x3d, 0xa5, 0x6f, 0x73, 0x6e, 0xfb,
	0xe2, 0xde, 0xd8, 0x35, 0xeb, 0xbb, 0xd1, 0xde, 0xe9, 0x96, 0xf9, 0xc2,
	0x42, 0x67, 0xda, 0x71, 0x30, 0x3c, 0x14, 0x42, 0x80, 0x73, 0x5d, 0xd7,
	0xed, 0xa1, 0x74, 0xf4, 0x05, 0x5d, 0x29, 0x25, 0xe7, 0x9c, 0xa5, 0x04,
	0x69, 0x10, 0x85, 0xed, 0x14, 0xb4, 0xa2, 0x4b, 0x83, 0x10, 0x84, 0xc1,
	0xd2, 0x1e, 0xab, 0x6b, 0xd6, 0xb6, 0x2b, 0xb6, 0xd4, 0xc3, 0xdd, 0x55,
	0xf6, 0x92, 0x9d, 0xf7, 0xea, 0xba, 0x91, 0x62, 0x7e, 0xb0, 0xbc, 0x7e,
	0x60, 0x25, 0xa4, 0x49, 0x8c, 0x5d, 0xef, 0xd6, 0xe7, 0x65, 0x66, 0xc6,
	0xf3, 0x25, 0xed, 0x9c, 0x0f, 0x09, 0x47, 0x51, 0x3c, 0xda, 0x94, 0xd4,
	0x29, 0xa8, 0x82, 0xeb, 0x95, 0xe4, 0x90, 0xe3, 0x43, 0xc7, 0x1c, 0xaa,
	0xe2, 0x47, 0x66, 0x58, 0xfb, 0x75, 0xea, 0xf1, 0x95, 0xc5, 0xed, 0x07,
	0x6d, 0xf7, 0xf7, 0xe9, 0x9c, 0x59, 0xcc, 0xb9, 0xf9, 0xcd, 0x9f, 0x5e,
	0x96, 0xec, 0xe0, 0xfe, 0x62, 0x7f, 0xa5, 0x4d, 0xfb, 0x7d, 0xc7, 0x46,
	0xc3, 0xd3, 0x5f, 0x68, 0xde, 0x78, 0xfd, 0x9d, 0x5a, 0x3d, 0x60, 0x70,
	0x61, 0xad, 0x36, 0x1c, 0x0e, 0x87, 0x17, 0xb7, 0x36, 0xdf, 0xcc, 0x39,
	0xe7, 0xa7, 0x0f, 0x4a, 0xce, 0xe5, 0xa5, 0xcc, 0xd7, 0xa3, 0xd4, 0x4f,
	0x62, 0xd7, 0xf6, 0xa1, 0xaa, 0xaa, 0xcd, 0xa6, 0x97, 0x92, 0x57, 0xd3,
	0xfb, 0x45, 0xb9, 0xc1, 0x6e, 0x51, 0x0a, 0xe5, 0x51, 0x4a, 0x92, 0xcd,
	0xa3, 0x28, 0x1e, 0x05, 0x3e, 0x60, 0xbe, 0x63, 0xe9, 0x39, 0x33, 0xb3,
	0xd1, 0xd1, 0xa7, 0xcb, 0x5b, 0x54, 0x07, 0x96, 0x96, 0xe7, 0xbb, 0x28,
	0x1b, 0xcb, 0xb9, 0x0f, 0xab, 0x5d, 0x89, 0x4b, 0x53, 0x4f, 0xfe, 0xd2,
	0xf5, 0xfb, 0x9a, 0x0d, 0xff, 0x7f, 0x96, 0xe4, 0xd1, 0xae, 0xed, 0xfd,
	0x4f, 0x84, 0x53, 0x4f, 0x70, 0x86, 0x8d, 0xcb, 0x3c, 0x7c, 0xe8, 0x8f,
	0xaf, 0xee, 0xba, 0x73, 0xf7, 0xf7, 0xf7, 0xe3, 0xe0, 0xdd, 0xff, 0x16,
	0xa3, 0x65, 0x45, 0x1d, 0x06, 0xf5, 0xe4, 0x63, 0x4f, 0x4e, 0x05, 0x67,
	0x70, 0x79, 0x83, 0x7f, 0x2e, 0x5d, 0x74, 0xf3, 0xc7, 0xf6, 0x95, 0x94,
	0xf4, 0xcd, 0x66, 0x55, 0x55, 0xa1, 0x6f, 0xbb, 0x38, 0xe9, 0xd3, 0xe8,
	0x51, 0x5e, 0x7c, 0x77, 0x7b, 0x71, 0xe5, 0xf1, 0xc9, 0xec, 0xb7, 0x1f,
	0x54, 0x69, 0x49, 0xd4, 0x86, 0xd7, 0x06, 0x35, 0x97, 0x8e, 0x62, 0xd8,
	0xf9, 0xfe, 0xdb, 0x6d, 0xdb, 0x87, 0xa3, 0x41, 0x7a, 0xfb, 0xdc, 0x64,
	0xf8, 0xd6, 0xea, 0xd5, 0xb3, 0x23, 0x46, 0x5f, 0xdc, 0xba, 0x75, 0x15,
	0x3d, 0x3d, 0xbd, 0xbe, 0xef, 0xd1, 0xf7, 0xfd, 0xf5, 0x97, 0xff, 0x9e,
	0x00, 0x01, 0x41, 0x9c, 0x01, 0xcd, 0xf2, 0x0a, 0xc3, 0xf0, 0x45, 0xf3,
	0x74, 0xea, 0x0b, 0x7a, 0x7b, 0x7b, 0xc8, 0x58, 0xfa, 0x0f, 0x0a, 0x4d,
	0x70, 0x0a, 0x3e, 0xa5, 0xb8, 0x75, 0x7d, 0x79, 0xa7, 0x70, 0xc6, 0xae,
	0x4a, 0x5a, 0xec, 0x96, 0xa5, 0x63, 0x7e, 0x4e, 0xc5, 0xd1, 0x03, 0xf9,
	0x36, 0x85, 0xf4, 0x31, 0x64, 0x94, 0x8c, 0x5d, 0x05, 0x0d, 0x59, 0x22,
	0xdf, 0x21, 0x04, 0xe2, 0x50, 0x68, 0x14, 0x51, 0x14, 0x40, 0x73, 0xee,
	0x7b, 0x93, 0x5d, 0x77, 0x35, 0x18, 0x25, 0x4a, 0x2c, 0xec, 0xd4, 0xce,
	0x42, 0x10, 0x41, 0xc4, 0x52, 0x48, 0x61, 0x10, 0xb1, 0x54, 0x41, 0x0b,
	0x21, 0x61, 0x43, 0x50, 0x97, 0x38, 0x91, 0xf9, 0xbd, 0x7b, 0x84, 0x82,
	0x58, 0x98, 0xab, 0xef, 0x35, 0x86, 0xf1, 0x18, 0x42, 0x7d, 0x15, 0x89,
	0x03, 0x07, 0x62, 0x08, 0xad, 0x39, 0xd4, 0x14, 0xe2, 0xb3, 0x06, 0x50,
	0x33, 0xa8, 0x79, 0x14, 0x31, 0xe8, 0xe0, 0xc8, 0xf5, 0xbb, 0xee, 0xb5,
	0xd6, 0x5e, 0xcf, 0xfb, 0x3c, 0x62, 0xaf, 0x2d, 0xde, 0x66, 0x3b, 0x90,
	0xa2, 0x95, 0x88, 0x72, 0xf0, 0xdf, 0x0e, 0x2b, 0xb9, 0x45, 0x80, 0x49,
	0x00, 0x84, 0x20, 0x08, 0x00, 0x01, 0x70, 0x4f, 0x23, 0x31, 0xb0, 0xf8,
	0xc1, 0x2b, 0x47, 0x20, 0x00, 0x7e, 0x27, 0xd9, 0xd3, 0x1e, 0xc0, 0x66,
	0x37, 0x19, 0x6c, 0x31, 0xc8, 0x90, 0xb0, 0x24, 0x0c, 0x09, 0x4b, 0xc2,
	0x90, 0xb0, 0x24, 0x0c, 0x09, 0x4b, 0xc2, 0x90, 0xb0, 0x24, 0x0c, 0x09,
	0x4b, 0xc2, 0x90, 0x48, 0x24, 0x12, 0x89, 0x44, 0x22, 0x91, 0x48, 0x24,
	0x12, 0x89, 0x44, 0x22, 0x21, 0x8b, 0xae, 0x3d, 0xda, 0x51, 0xf3, 0xef,
	0x47, 0x19, 0x7f, 0x1b, 0xd9, 0xff, 0x31, 0x36, 0x4b, 0x7a, 0x8c, 0x41,
	0x6a, 0x8c, 0xa1, 0xa1, 0x31, 0x86, 0x2e, 0xf3, 0x72, 0xaf, 0xfd, 0xfc,
	0x9d, 0x6f, 0x7d, 0xf8, 0xa6, 0x57, 0xbf, 0xf2, 0xa9, 0x55, 0x17, 0xaa,
	0x57, 0xbb, 0x2a, 0x4f, 0x6b, 0xdf, 0xb8, 0x9c, 0x7e, 0xff, 0xb2, 0xc7,
	0xef, 0xd8, 0xfb, 0x20, 0x34, 0xc6, 0x50, 0x6a, 0x8c, 0xa1, 0xd4, 0x18,
	0x43, 0xa9, 0x31, 0x86, 0x52, 0x63, 0x0c, 0xa5, 0xc6, 0x13, 0xd2, 0xd1,
	0x3d, 0xd4, 0xce, 0x91, 0x76, 0xb9, 0x6b, 0xfb, 0x7f, 0xbb, 0x5c, 0xda,
	0x5f, 0xb6, 0x0d, 0xfe, 0xb0, 0x28, 0xe5, 0x75, 0xbe, 0xcb, 0x63, 0xaf,
	0xd4, 0x96, 0x6e, 0x51, 0x62, 0x59, 0x94, 0x96, 0x45, 0x89, 0xe5, 0x94,
	0x57, 0x78, 0xcc, 0x75, 0x4f, 0x85, 0xd4, 0x16, 0xa5, 0x68, 0x4a, 0x84,
	0x01, 0x61, 0x40, 0x0b, 0xa1, 0xd6, 0x5a, 0x44, 0x4c, 0xd1, 0x5a, 0x44,
	0x6b, 0x11, 0xad, 0xed, 0x22, 0x1e, 0x5a, 0x5e, 0xe0, 0xe8, 0x71, 0xd7,
	0x7a, 0x54, 0xc2, 0xb6, 0x04, 0x2d, 0x1a, 0x53, 0xa8, 0x35, 0xa9, 0x35,
	0xa9, 0x2d, 0x4d, 0x2d, 0xa2, 0xfd, 0x50, 0x4f, 0xf1, 0xe8, 0xa3, 0xf3,
	0xc5, 0xd3, 0xa6, 0x10, 0x73, 0x44, 0x40, 0x04, 0x44, 0x80, 0x5a, 0xa0,
	0x63, 0x1c, 0xf3, 0xa0, 0xbb, 0x1c, 0x78, 0xe0, 0xd6, 0x3f, 0x0f, 0x9c,
	0xca, 0x9f, 0xb6, 0x4c, 0xdb, 0xd7, 0xb7, 0x1d, 0x3c, 0xb3, 0x6a, 0x6b,
	0x4b, 0xda, 0xda, 0x92, 0xb6, 0xb6, 0xa4, 0xad, 0x2d, 0x69, 0x6b, 0x4b,
	0xda, 0xda, 0xd2, 0xf2, 0xac, 0x67, 0x4f, 0xd2, 0x56, 0x91, 0x26, 0x4b,
	0x05, 0xe4, 0x62, 0x13, 0xd4, 0x58, 0xb2, 0x0d, 0xf7, 0xc7, 0x39, 0x98,
	0xf5, 0xec, 0x25, 0xc3, 0xc9, 0xc8, 0xe7, 0xff, 0xfd, 0xf5, 0x31, 0x46,
	0x24, 0x63, 0x0c, 0xa5, 0xc6, 0x18, 0x4a, 0x8d, 0x31, 0x94, 0x1a, 0x63,
	0x28, 0x35, 0xc6, 0x50, 0x6a, 0x8c, 0xa1, 0xd4, 0xb8, 0x6a, 0x27, 0xe7,
	0xa5, 0x3f, 0xed, 0xd6, 0x7d, 0xb7, 0x05, 0xc8, 0x11, 0x20, 0xd5, 0x88,
	0xa4, 0x38, 0x48, 0x8b, 0xd2, 0x54, 0x8d, 0x48, 0x47, 0xdf, 0xbb, 0x2f,
	0x2a, 0x4d, 0xc9, 0xa1, 0x14, 0xa1, 0x14, 0xa1, 0x14, 0xa1, 0x14, 0xa1,
	0x14, 0xa1, 0x14, 0x31, 0xee, 0xf7, 0xa6, 0xeb, 0xb5, 0x40, 0xa4, 0x50,
	0x6a, 0x19, 0x35, 0x08, 0x85, 0x0c, 0x52, 0xa1, 0xfd, 0x74, 0x68, 0x3e,
	0xf6, 0xfc, 0x7e, 0x54, 0x85, 0x3c, 0x97, 0x25, 0x5b, 0xb2, 0x25, 0x5b,
	0xb2, 0x25, 0x5b, 0xb2, 0x25, 0x2f, 0x56, 0x8b, 0x38, 0xf2, 0xfd, 0xf5,
	0x7b, 0xdb, 0xcb, 0x40, 0x24, 0x5a, 0x28, 0x64, 0x65, 0xc6, 0xd2, 0xa6,
	0xa5, 0x05, 0xcc, 0x97, 0x3e, 0xfb, 0xda, 0xd7, 0xd3, 0xf5, 0xbd, 0x45,
	0xef, 0xa8, 0x77, 0xa9, 0x77, 0xa9, 0x77, 0xa9, 0x77, 0xa9, 0x77, 0xa9,
	0x77, 0xa9, 0x77, 0xa9, 0xbf, 0xba, 0x07, 0x8f, 0x98, 0xf7, 0x58, 0x48,
	0x1d, 0x75, 0x64, 0x83, 0x1a, 0x53, 0x96, 0xaa, 0xcc, 0xb8, 0xde, 0x9c,
	0xf4, 0x09, 0xbf, 0x45, 0xad, 0x0e, 0xf2, 0x85, 0x57, 0xf8, 0x2d, 0xb9,
	0xb0, 0x58, 0x2c, 0x16, 0x7f, 0xc7, 0x3b, 0x3e, 0xf6, 0xfa, 0x2e, 0x5f,
	0xe2, 0x35, 0x5f, 0x91, 0xa8, 0x52, 0xd2, 0xd5, 0x54, 0xa3, 0x2e, 0x5a,
	0x90, 0x4e, 0xef, 0xf6, 0x44, 0x50, 0xcb, 0x42, 0xae, 0x22, 0xc3, 0xc6,
	0x8b, 0xf7, 0x7b, 0x26, 0x2b, 0x6d, 0x18, 0x49, 0xcd, 0x0e, 0x42, 0xc1,
	0xbe, 0x1d, 0x14, 0x1f, 0x3e, 0xbc, 0x67, 0x07, 0xa1, 0x2c, 0x08, 0x05,
	0xe4, 0x14, 0x42, 0x08, 0x21, 0x9a, 0xbd, 0x40, 0xbc, 0x3d, 0x7f, 0x58,
	0x7a, 0xdc, 0xac, 0x90, 0x15, 0x48, 0xa3, 0xc5, 0x24, 0x3d, 0xfd, 0xe8,
	0xaf, 0xdd, 0x3b, 0xea, 0x41, 0xee, 0x41, 0xce, 0x1e, 0xf4, 0x9b, 0x8d,
	0x9f, 0x6f, 0x44, 0x97, 0x7a, 0x60, 0x82, 0x1a, 0x53, 0x96, 0x7a, 0x82,
	0xcf, 0x79, 0xf6, 0xe4, 0xd8, 0xaa, 0x5e, 0xd3, 0x55, 0xd5, 0x90, 0x9b,
	0x10, 0xb9, 0x10, 0x42, 0x08, 0x21, 0xaa, 0x94, 0x74, 0x3d, 0x3c, 0xaa,
	0x17, 0xfb, 0x3f, 0x7f, 0xe2, 0x2a, 0x25, 0x5d, 0x1d, 0xd5, 0xa8, 0x2b,
	0xb5, 0xdf, 0x97, 0xb9, 0xdf, 0x0a, 0x15, 0x51, 0x64, 0x09, 0x72, 0x5a,
	0x13, 0xd2, 0x1b, 0x9f, 0x1d, 0xd7, 0x4a, 0xce, 0xa8, 0x59, 0x3b, 0xf9,
	0xfc, 0xdf, 0xaf, 0x08, 0x50, 0xb3, 0x83, 0x50, 0x16, 0x84, 0x02, 0x72,
	0x0a, 0x21, 0x84, 0x10, 0xcd, 0x0e, 0x42, 0xd2, 0xfb, 0x9f, 0xfb, 0xfd,
	0xb2, 0x59, 0x21, 0x2b, 0x33, 0x5a, 0xb4, 0x7d, 0x3f, 0x9d, 0xa1, 0x05,
	0x3d, 0x98, 0x82, 0xdc, 0x83, 0x9c, 0x53, 0x30, 0x05, 0x3a, 0xbc, 0xe8,
	0x84, 0x26, 0x64, 0x83, 0x1a, 0xe3, 0xa1, 0xdf, 0xbe, 0xdc, 0x66, 0xa8,
	0x51, 0xd2, 0x55, 0xd5, 0x90, 0x9b, 0x10, 0xb9, 0x10, 0x42, 0x08, 0x21,
	0xaa, 0x3b, 0xa9, 0xaa, 0x06, 0xdd, 0xff, 0x3f, 0x31, 0x2f, 0x55, 0x4d,
	0x35, 0xea, 0x3a, 0x2f, 0xcc, 0xb5, 0x33, 0x45, 0xd4, 0xb2, 0x90, 0xcb,
	0x9a, 0xc8, 0xfc, 0xbd, 0xd5, 0xf8, 0x95, 0x3b, 0x22, 0x90, 0x74, 0xe3,
	0x38, 0xf7, 0x43, 0x61, 0x65, 0x68, 0xe1, 0x20, 0x94, 0x05, 0xa1, 0x80,
	0x9c, 0x42, 0x08, 0x21, 0x44, 0xb3, 0x83, 0x50, 0x86, 0x7e, 0xe3, 0x7c,
	0xe8, 0xb1, 0xac, 0x40, 0x9a, 0xf2, 0x8e, 0x9e, 0x6b, 0x64, 0x4a, 0x8b,
	0x1e, 0xe4, 0x4e, 0x2e, 0x07, 0xa5, 0x18, 0xc5, 0xeb, 0x22, 0x4a, 0xb1,
	0x91, 0xd6, 0xf1, 0x82, 0xb3, 0x98, 0xaa, 0x48, 0x54, 0xef, 0x59, 0x8a,
	0xc9, 0x0b, 0xf0, 0x06, 0x70, 0x4f, 0x0e, 0xc0, 0x1b, 0xc0, 0x23, 0xd5,
	0x7b, 0x96, 0xa2, 0x0c, 0x9f, 0x7a, 0xbb, 0xfc, 0x9f, 0x4f, 0xb6, 0x23,
	0x33, 0x1e, 0x88, 0x9a, 0x91, 0xba, 0x28, 0x82, 0x6c, 0xe4, 0x28, 0x4a,
	0x91, 0xb1, 0xf2, 0x41, 0xce, 0xe8, 0x6c, 0x39, 0xeb, 0x19, 0x8f, 0x85,
	0x02, 0xa4, 0xe6, 0x08, 0x2c, 0x43, 0x36, 0x10, 0x20, 0x72, 0x00, 0x02,
	0x44, 0x0b, 0x85, 0xac, 0x0c, 0xcd, 0x7a, 0xf3, 0x06, 0x2b, 0x33, 0xdf,
	0x66, 0xaf, 0xa8, 0x53, 0x20, 0x35, 0x53, 0xc8, 0x5e, 0x4c, 0x7e, 0xc3,
	0x14, 0x52, 0xa1, 0xdd, 0xe9, 0xfa, 0xc8, 0x06, 0xfb, 0xf2, 0xed, 0x65,
	0x64, 0x9f, 0x94, 0xa1, 0xc6, 0x94, 0x65, 0x52, 0x5e, 0x80, 0x00, 0x91,
	0x03, 0x10, 0x20, 0xaa, 0x3b, 0xe9, 0x22, 0x51, 0x9d, 0x0f, 0xaa, 0xb7,
	0x70, 0x33, 0x52, 0xfb, 0x0d, 0xa6, 0x91, 0xaa, 0x28, 0x82, 0x6c, 0xe4,
	0xb0, 0x52, 0x64, 0x42, 0xc9, 0x57, 0x1a, 0x49, 0x6f, 0x3d, 0x11, 0xa1,
	0x50, 0x80, 0xd4, 0xec, 0x20, 0x14, 0x90, 0x0d, 0x04, 0x88, 0x1c, 0x80,
	0x00, 0xd1, 0xac, 0x50, 0x28, 0x43, 0x0b, 0xed, 0xf4, 0x6a, 0x19, 0xa9,
	0xbc, 0xab, 0xc5, 0xc8, 0x4c, 0xa8, 0x93, 0x3d, 0xc8, 0x5f, 0x0f, 0x3a,
	0xa9, 0xa3, 0x7a, 0xe7, 0xc0, 0x04, 0x77, 0x27, 0xab, 0xe9, 0x21, 0x83,
	0x54, 0x93, 0x93, 0xee, 0x62, 0x66, 0x33, 0x6f, 0x44, 0x44, 0x44, 0x44,
	0xd5, 0x49, 0x75, 0x91, 0xa8, 0xce, 0x3f, 0x7a, 0x9e, 0x93, 0x94, 0x55,
	0xa9, 0x55, 0xa3, 0x2a, 0x8a, 0x7c, 0xac, 0xe4, 0x8c, 0x95, 0x8e, 0x98,
	0xd1, 0x1b, 0x08, 0xd9, 0x27, 0x4b, 0x23, 0x68, 0x76, 0x10, 0xca, 0x67,
	0xba, 0x66, 0x85, 0xec, 0xae, 0x05, 0xa8, 0xd9, 0xbf, 0xd3, 0x3d, 0x57,
	0x99, 0x38, 0xc7, 0xd2, 0xc6, 0xd2, 0x82, 0xa9, 0x45, 0x0f, 0xf2, 0xee,
	0x41, 0x6f, 0x81, 0x3a, 0xba, 0x7d, 0x60, 0x83, 0xbb, 0x27, 0xd5, 0xf4,
	0x50, 0x0b, 0x50, 0x4d, 0x91, 0xf4, 0x0e, 0x78, 0x53, 0x74, 0x81, 0x4d,
	0xe8, 0x02, 0x9b, 0xd0, 0x05, 0x36, 0xa1, 0x0b, 0x6c, 0x42, 0x17, 0xd8,
	0x84, 0x2e, 0xb0, 0x09, 0x5d, 0x60, 0x13, 0xba, 0xc0, 0x26, 0x54, 0x77,
	0xd2, 0x15, 0x20, 0x55, 0x67, 0xa7, 0x17, 0xb9, 0x91, 0x3c, 0xa1, 0xc1,
	0x62, 0xa4, 0x2a, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x56, 0x8a, 0x6a, 0x14, 0x06, 0xbe, 0x8a, 0xa4, 0xfb, 0xf6, 0x5b,
	0x42, 0x56, 0x35, 0xa8, 0x45, 0x04, 0x5e, 0xad, 0xe9, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x85, 0x42, 0x56, 0x35, 0xa8, 0x55,
	0x76, 0x7a, 0x85, 0x48, 0xe5, 0x33, 0xcb, 0xd2, 0x46, 0x0b, 0x34, 0xb5,
	0xe8, 0x6a, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d,
	0xe8, 0x2d, 0x50, 0x47, 0xf5, 0xb6, 0xc8, 0x04, 0xcf, 0xe7, 0x5b, 0xb2,
	0xf7, 0xab, 0x65, 0x68, 0x69, 0x04, 0x35, 0x2d, 0xd9, 0x7a, 0x3f, 0x6b,
	0xd2, 0x0d, 0xe9, 0x3d, 0x5b, 0x75, 0x35, 0x1d, 0xff, 0xd6, 0xdf, 0x2d,
	0xff, 0xbe, 0xf5, 0xe0, 0x61, 0xdd, 0xfd, 0x73, 0xae, 0xa6, 0x18, 0x51,
	0xce, 0xd2, 0xe4, 0x09, 0x12, 0xff, 0xa3, 0x5c, 0xfb, 0x8a, 0xac, 0xcc,
	0x50, 0xbd, 0x65, 0x74, 0x05, 0x48, 0xd5, 0xe3, 0x4b, 0xbb, 0xea, 0x35,
	0xdc, 0x05, 0xd2, 0x72, 0x96, 0x53, 0xa3, 0x55, 0x0b, 0x64, 0x4d, 0x0d,
	0xad, 0x59, 0xa1, 0x75, 0x7d, 0x78, 0x78, 0x9f, 0xee, 0x9a, 0xd7, 0xc6,
	0xa6, 0xde, 0xd3, 0x76, 0x9e, 0x2b, 0xa5, 0xb5, 0x91, 0xaa, 0xf8, 0xc3,
	0x98, 0x33, 0xda, 0xd2, 0x0f, 0x39, 0x56, 0x55, 0x80, 0xd4, 0x22, 0x02,
	0xaf, 0x55, 0xeb, 0xda, 0xaf, 0xaf, 0x67, 0xad, 0x5a, 0xdf, 0xac, 0xb6,
	0x4f, 0xeb, 0x30, 0xaf, 0x75, 0xb5, 0xa2, 0x93, 0xd5, 0xe5, 0x6a, 0xc5,
	0xeb, 0x4e, 0x5d, 0x2b, 0x22, 0x2b, 0x33, 0xb4, 0x50, 0x68, 0x96, 0x41,
	0xba, 0xb1, 0x5f, 0x7c, 0xb0, 0x8a, 0x34, 0xbd, 0x3e, 0x76, 0xc6, 0x7a,
	0xae, 0x2e, 0xdb, 0x4b, 0xef, 0x5a, 0x97, 0x7e, 0xa5, 0x1a, 0x5e, 0x66,
	0x4c, 0x9d, 0xeb, 0xc5, 0x76, 0x9d, 0xb5, 0xa3, 0x59, 0x73, 0x35, 0x59,
	0x4a, 0x8b, 0x3e, 0x57, 0x53, 0xdb, 0x79, 0xce, 0x59, 0x90, 0x45, 0x37,
	0xd3, 0x55, 0xfe, 0xf0, 0x29, 0x43, 0x2d, 0x40, 0x55, 0x76, 0x72, 0xbb,
	0xdf, 0x7e, 0x26, 0xa2, 0x1b, 0x65, 0xee, 0xb4, 0xae, 0xf5, 0x36, 0xa8,
	0x9d, 0x7b, 0x97, 0xed, 0x5b, 0x1a, 0xf7, 0xea, 0x04, 0xff, 0xef, 0x98,
	0xbf, 0x9e, 0xb3, 0x43, 0xef, 0x08, 0x77, 0x1a, 0x32, 0x21, 0x91, 0x95,
	0x19, 0xaa, 0xee, 0xe4, 0x76, 0x17, 0x89, 0x53, 0xe7, 0x0b, 0xcf, 0x62,
	0x29, 0x26, 0xb3, 0xb6, 0x3c, 0x78, 0xb5, 0xb4, 0x60, 0xd6, 0xcc, 0xfe,
	0x72, 0x04, 0xaf, 0x9a, 0x7a, 0xfd, 0xe3, 0x76, 0x7c, 0x38, 0x2c, 0x1b,
	0x8e, 0xf7, 0x51, 0xaa, 0x4a, 0x29, 0xa5, 0x98, 0x7c, 0xcf, 0x4a, 0xab,
	0x62, 0xb4, 0x7a, 0x00, 0xac, 0x48, 0x6a, 0x2b, 0xde, 0xe7, 0x45, 0x6e,
	0xa2, 0x8d, 0x00, 0xb5, 0x4a, 0x68, 0x75, 0x1a, 0xa1, 0x8d, 0xb9, 0x7c,
	0x5a, 0x71, 0xb8, 0x75, 0xe5, 0xbf, 0x0e, 0x59, 0x4e, 0x57, 0x6c, 0xac,
	0x35, 0xd6, 0x88, 0x8d, 0x9d, 0xd5, 0xba, 0xf2, 0xaa, 0x2a, 0x59, 0x79,
	0x32, 0x43, 0x2b, 0x0a, 0xcd, 0x22, 0xb1, 0x1f, 0x6e, 0x3d, 0x1e, 0xef,
	0x7b, 0xaa, 0x48, 0xd3, 0x7a, 0xbe, 0xfd, 0xd2, 0x46, 0xa0, 0x52, 0x3d,
	0x1c, 0xab, 0x8d, 0xa9, 0xa3, 0x46, 0x71, 0x2b, 0x6b, 0xcf, 0xa5, 0x6e,
	0x97, 0x0d, 0x08, 0x41, 0xd6, 0xd5, 0x5c, 0x3b, 0x69, 0xff, 0xe9, 0xad,
	0x29, 0xc8, 0x14, 0xd7, 0xf6, 0xce, 0xc5, 0x76, 0xdb, 0xe7, 0x75, 0x3b,
	0x4d, 0x23, 0xa8, 0xed, 0xed, 0x5c, 0x86, 0x23, 0x20, 0x6f, 0xb0, 0xcc,
	0x62, 0x80, 0xda, 0x6e, 0x19, 0x5d, 0x2d, 0x1e, 0x28, 0x17, 0xba, 0x1e,
	0x96, 0x48, 0x8a, 0x23, 0x90, 0xd6, 0x4a, 0xd3, 0xee, 0xe1, 0x4b, 0x8b,
	0x59, 0xa9, 0xe4, 0x53, 0x95, 0x6a, 0x8b, 0xe7, 0x87, 0xe6, 0xd7, 0x55,
	0xa9, 0x66, 0xd4, 0xaa, 0x42, 0xf5, 0x6c, 0xba, 0xf8, 0x4f, 0x7f, 0x0d,
	0x5a, 0x25, 0x54, 0x95, 0x0f, 0x20, 0x66, 0x11, 0xd0, 0xaa, 0x42, 0xb5,
	0x82, 0x7d, 0xf9, 0xc1, 0xcb, 0xd3, 0xb7, 0x4a, 0xa8, 0x2a, 0xb3, 0x9e,
	0x4a, 0x3f, 0x89, 0x1f, 0xed, 0xc1, 0x6c, 0x4a, 0x31, 0xf9, 0xaf, 0xa8,
	0xc4, 0x9b, 0x0b, 0x7a, 0x9f, 0x73, 0x0a, 0x2a, 0x81, 0x0d, 0x6a, 0x59,
	0xb2, 0x4d, 0xaa, 0xbe, 0x7b, 0xe4, 0x9e, 0xb5, 0x44, 0x52, 0xfc, 0xf8,
	0x80, 0x4d, 0x7a, 0x99, 0xc3, 0xe4, 0x61, 0x7a, 0xc1, 0x58, 0xb2, 0x33,
	0x47, 0x35, 0x27, 0xfd, 0x7e, 0x7d, 0xa9, 0xfb, 0x1f, 0x7c, 0xec, 0xa5,
	0x42, 0xa9, 0x6e, 0x8c, 0x34, 0xdb, 0xcb, 0x66, 0x8b, 0xd7, 0x97, 0xe4,
	0xcb, 0xd5, 0xea, 0xde, 0x82, 0xfc, 0x04, 0x12, 0xd9, 0xab, 0xa8, 0x1c,
	0x7f, 0xb5, 0x0f, 0x54, 0x44, 0x85, 0xa4, 0x56, 0x08, 0x15, 0x55, 0x2f,
	0x5c, 0x1c, 0x72, 0x58, 0xdf, 0xcd, 0x91, 0xaa, 0x02, 0xb2, 0xcd, 0x21,
	0x12, 0x22, 0x3b, 0x73, 0xb4, 0xc2, 0x7e, 0xf8, 0xef, 0xea, 0x13, 0xcf,
	0x8e, 0x77, 0x2a, 0xa6, 0x55, 0x42, 0x45, 0xa4, 0x69, 0x69, 0x73, 0x0b,
	0xf4, 0xf6, 0xf7, 0x44, 0xab, 0x73, 0x35, 0x79, 0xb6, 0x40, 0x64, 0x2f,
	0x2d, 0x3f, 0xe9, 0x0d, 0xd7, 0xc5, 0xa8, 0x04, 0x15, 0x99, 0xa0, 0xfa,
	0x92, 0x6d, 0x53, 0x4b, 0x23, 0xf8, 0x71, 0xde, 0x3c, 0xbc, 0xc4, 0xbb,
	0x07, 0xbf, 0xd8, 0x1d, 0xe6, 0x63, 0x69, 0x19, 0x9b, 0x0a, 0xc8, 0x63,
	0x06, 0x6d, 0x76, 0x8a, 0x95, 0x27, 0x33, 0x5c, 0x5f, 0x95, 0x48, 0x36,
	0xf7, 0x2f, 0xf6, 0xe7, 0x23, 0x8f, 0xd8, 0xfd, 0x47, 0x53, 0x80, 0x54,
	0x76, 0xd2, 0x1d, 0x81, 0x34, 0xd9, 0x62, 0xff, 0x5e, 0x8c, 0xf9, 0xb6,
	0xdf, 0xa3, 0xba, 0xd2, 0x6c, 0xf2, 0x20, 0x91, 0xb5, 0x88, 0xee, 0xfa,
	0xe8, 0xf1, 0xfb, 0x7f, 0xb5, 0x20, 0x59, 0x53, 0x33, 0x6a, 0x55, 0xa1,
	0xaa, 0x62, 0x90, 0x48, 0x9c, 0xfd, 0x79, 0xf3, 0xcf, 0x5e, 0xa8, 0x28,
	0x20, 0x8f, 0x19, 0x44, 0x42, 0x64, 0x65, 0x86, 0x6f, 0x75, 0xbc, 0xfb,
	0x2f, 0xdd, 0xf7, 0x6f, 0xee, 0x75, 0x31, 0xe4, 0x26, 0x5a, 0x29, 0xe1,
	0x2a, 0xd2, 0xbc, 0xb4, 0xcd, 0x16, 0x88, 0xb4, 0xaf, 0x77, 0xf8, 0x6c,
	0x9f, 0xab, 0xc9, 0x42, 0x22, 0xeb, 0xe5, 0xd9, 0xf9, 0x54, 0x1c, 0xab,
	0x04, 0xb9, 0xd7, 0x16, 0x35, 0xb0, 0xa8, 0x36, 0x97, 0x6c, 0xd3, 0xe8,
	0x91, 0xf4, 0xd1, 0x95, 0xea, 0xa3, 0xeb, 0x42, 0x6d, 0x9f, 0x2b, 0x4f,
	0xe2, 0x6e, 0x07, 0x9d, 0xfa, 0x7f, 0x5d, 0xa9, 0x3e, 0xba, 0x52, 0x7d,
	0x74, 0xa5, 0xfa, 0xe8, 0x4a, 0xf5, 0xd1, 0x95, 0xea, 0x9f, 0xbb, 0xbe,
	0x2c, 0x97, 0xfd, 0xf1, 0x65, 0x2d, 0x4a, 0xf5, 0x61, 0xa5, 0xca, 0x80,
	0x94, 0x87, 0x95, 0xb2, 0x29, 0x46, 0x9b, 0x2e, 0x6d, 0xee, 0x06, 0xb5,
	0x28, 0x95, 0xa2, 0x54, 0x4a, 0x5e, 0xf9, 0x7d, 0x37, 0xb6, 0x52, 0x41,
	0x64, 0x2b, 0xd9, 0x4a, 0xb6, 0x92, 0xeb, 0xd9, 0xa6, 0x8f, 0x1f, 0x5c,
	0x31, 0xb0, 0x06, 0x6b, 0xb0, 0x06, 0x6b, 0x28, 0x16, 0x6a, 0xa5, 0x84,
	0x3d, 0x47, 0x29, 0x76, 0x29, 0x76, 0x29, 0xf6, 0x52, 0x2c, 0x8b, 0xf3,
	0xa6, 0xdf, 0xbd, 0xe5, 0xfd, 0x4f, 0xcf, 0xef, 0x28, 0x65, 0x67, 0xff,
	0x5b, 0xca, 0x57, 0xfb, 0x6b, 0x29, 0x47, 0xf6, 0x41, 0x9e, 0xf9, 0xbc,
	0x3f, 0x7f, 0xe0, 0x66, 0xcb, 0x99, 0x70, 0xe0, 0x59, 0x8a, 0x84, 0x0d,
	0x36, 0xd8, 0xa0, 0x62, 0x34, 0x2f, 0x6d, 0xb3, 0x06, 0xdd, 0x52, 0x01,
	0xd9, 0x92, 0xad, 0x73, 0xbf, 0xe6, 0xad, 0x5f, 0xf8, 0xbc, 0x37, 0xf2,
	0xe9, 0x9a, 0xc5, 0x0d, 0xb6, 0xcf, 0x68, 0x9f, 0x9b, 0xbe, 0x78, 0xbb,
	0x77, 0xee, 0x15, 0xb2, 0x25, 0x5b, 0xb2, 0x25, 0x5b, 0xb2, 0x25, 0x17,
	0x9b, 0xea, 0x27, 0x06, 0xc9, 0x18, 0x24, 0x4b, 0xc2, 0x90, 0xb0, 0x24,
	0x0c, 0x09, 0x4b, 0xc2, 0x90, 0xb0, 0x24, 0x0c, 0x09, 0x4b, 0xc2, 0x90,
	0xb0, 0x24, 0x0c, 0x09, 0x4b, 0xc2, 0x90, 0x48, 0x24, 0x12, 0x89, 0x44,
	0x22, 0x91, 0x48, 0x24, 0x12, 0x89, 0x44, 0x22, 0x21
};

//*************************** Program and Shaders ***************************/

/**
 * Program object ID.
 */
static GLuint progId = 0;

/**
 * Vertex shader ID.
 */
static GLuint vertId = 0;

/**
 * Fragment shader ID.
 */
static GLuint fragId = 0;

//********************************* Uniforms *********************************/

/**
 * Quad rotation angle ID.
 */
static GLint uRotId = -1;

/**
 * Draw colour ID.
 */
static GLint uTx0Id = -1;

//******************************* Shader Source ******************************/

/**
 * Vertex shader to draw texture mapped polys with an applied rotation.
 */
static GLchar const vertShader2D[] =
#if GL_ES_VERSION_2_0
	"#version 100\n"
	"precision mediump float;\n"
#else
	"#version 120\n"
#endif
	"uniform   float uRot;"	// rotation
	"attribute vec2  aPos;"	// vertex position coords
	"attribute vec2  aUV0;"	// vertex texture UV0
	"varying   vec2  vUV0;"	// (passed to fragment shader)
	"void main() {"
	"	float cosA = cos(radians(uRot));"
	"	float sinA = sin(radians(uRot));"
	"	mat3 rot = mat3(cosA, -sinA, 0.0,"
	"					sinA,  cosA, 0.0,"
	"					0.0,   0.0,  1.0);"
	"	gl_Position = vec4(rot * vec3(aPos, 1.0), 1.0);"
	"	vUV0 = aUV0;"
	"}";

/**
 * Fragment shader for the above polys.
 */
static GLchar const fragShader2D[] =
#if GL_ES_VERSION_2_0
	"#version 100\n"
	"precision mediump float;\n"
#else
	"#version 120\n"
#endif
	"uniform sampler2D uTx0;"
	"varying vec2      vUV0;" // (passed from fragment shader)
	"void main() {"
	"	gl_FragColor = texture2D(uTx0, vUV0);"
	"}";

/**
 * Helper to compile a shader.
 * 
 * \param type shader type
 * \param text shader source
 * \return the shader ID (or zero if compilation failed)
 */
static GLuint compileShader(GLenum const type, const GLchar* text) {
	GLuint shader = glCreateShader(type);
	if (shader) {
		glShaderSource (shader, 1, &text, NULL);
		glCompileShader(shader);
		GLint compiled;
		glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled);
		if (compiled) {
			return shader;
		} else {
			GLint logLen;
			glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &logLen);
			if (logLen > 1) {
				GLchar*  logStr = static_cast<GLchar*>(malloc(logLen));
				glGetShaderInfoLog(shader, logLen, NULL, logStr);
			#ifndef NDEBUG
				printf("Shader compilation error: %s\n", logStr);
			#endif
				free(logStr);
			}
			glDeleteShader(shader);
		}
	}
	return 0;
}

//********************************** Helpers *********************************/

/**
 * Vertex position index.
 */
#define GL_VERT_POSXY_ID 0

/**
 * Vertex UV0 index.
 */
#define GL_VERT_TXUV0_ID 1

 /**
  * \c GL vec2 storage type.
  */
struct vec2 {
	float x;
	float y;
};

/**
 * Combined 2D vertex and 2D texture coordinates.
 */
struct posTex2d {
	struct vec2 pos;
	struct vec2 uv0;
};

//****************************************************************************/

/**
 * Current quad rotation angle (in degrees, updated per frame).
 */
static float rotDeg = 0.0f;

/**
 * Emscripten (single) GL context.
 */
static EMSCRIPTEN_WEBGL_CONTEXT_HANDLE glCtx = 0;

/**
 * Emscripten resize handler.
 */
static EM_BOOL resize(int type, const EmscriptenUiEvent* e, void* data) {
	double surfaceW;
	double surfaceH;
	if (emscripten_get_element_css_size   ("#canvas", &surfaceW, &surfaceH) == EMSCRIPTEN_RESULT_SUCCESS) {
		emscripten_set_canvas_element_size("#canvas",  surfaceW,  surfaceH);
		if (glCtx) {
			glViewport(0, 0, (int) surfaceW, (int) surfaceH);
		}
	}
	(void) type;
	(void) data;
	(void) e;
	return EM_FALSE;
}

/**
 * Boilerplate to create a WebGL context.
 */
static EM_BOOL initContext() {
	// Default attributes
	EmscriptenWebGLContextAttributes attr;
	emscripten_webgl_init_context_attributes(&attr);
	if ((glCtx = emscripten_webgl_create_context("#canvas", &attr))) {
		// Bind the context and fire a resize to get the initial size
		emscripten_webgl_make_context_current(glCtx);
		emscripten_set_resize_callback(EMSCRIPTEN_EVENT_TARGET_DOCUMENT, NULL, EM_FALSE, resize);
		resize(0, NULL, NULL);
		return EM_TRUE;
	}
	return EM_FALSE;
}

/**
 * Called once per frame (clears the screen and draws the rotating quad).
 */
static void tick() {
	glClearColor(1.0f, 0.0f, 1.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	if (uRotId >= 0) {
		glUniform1f(uRotId, rotDeg);
		rotDeg += 0.1f;
		if (rotDeg >= 360.0f) {
			rotDeg -= 360.0f;
		}
	}

	glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, 0);
	glFlush();
}

/**
 * Creates the texture.
 */
bool upload(GLuint name, const uint8_t * data, size_t size, transcoder_texture_format type = cTFBC1) {
	basisu_transcoder_init();
	if (!globalCodebook) {
		 globalCodebook = new etc1_global_selector_codebook(g_global_selector_cb_size, g_global_selector_cb);
	}
	basisu_transcoder transcoder(globalCodebook);
	if (transcoder.validate_header(data, size)) {
		basisu_image_info info;
		if (transcoder.get_image_info(data, size, info, 0)) {
			uint32_t descW, descH, blocks;
			if (transcoder.get_image_level_desc(data, size, 0, 0, descW, descH, blocks)) {
				basisu_file_info fileInfo;
				transcoder.get_file_info(data, size, fileInfo);
				if (transcoder.start_transcoding(data, size)) {
					uint32_t decSize = basis_get_bytes_per_block(type) * blocks;
					if (void* decBuf = malloc(decSize)) {
						if (transcoder.transcode_image_level(data, size, 0, 0, decBuf, blocks, type)) {
							GLenum glType;
							switch (type) {
							case cTFBC1:
								glType = GL_COMPRESSED_RGB_S3TC_DXT1_EXT;
								break;
							case cTFPVRTC1_4_RGB:
								glType = GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
								break;
							default:
								glType = GL_FALSE;
							}
							if (glType != GL_FALSE) {
								glBindTexture(GL_TEXTURE_2D, name);
								glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
								glCompressedTexImage2D(GL_TEXTURE_2D, 0,
									glType, descW, descH, 0, decSize, decBuf);
							}
							free(decBuf);
							return glType != GL_FALSE;
						}
					}
				}
			}
		}
	}
	return false;
}

/**
 * Creates the GL context, shaders and quad data, decompresses the Zstd data
 * and 'uploads' the resulting texture.
 * 
 * As a (naive) comparison, removing Zstd and building with "-Os -g0 s WASM=1
 * -lGL emscripten.c" results in a 15kB WebAssembly file; re-adding Zstd
 * increases the Wasm by 26kB.
 */
int main() {
	if (initContext()) {
		// Compile shaders and set the initial GL state
		if ((progId = glCreateProgram())) {
			 vertId = compileShader(GL_VERTEX_SHADER,   vertShader2D);
			 fragId = compileShader(GL_FRAGMENT_SHADER, fragShader2D);
			 
			 glBindAttribLocation(progId, GL_VERT_POSXY_ID, "aPos");
			 glBindAttribLocation(progId, GL_VERT_TXUV0_ID, "aUV0");
			 
			 glAttachShader(progId, vertId);
			 glAttachShader(progId, fragId);
			 glLinkProgram (progId);
			 glUseProgram  (progId);
			 uRotId = glGetUniformLocation(progId, "uRot");
			 uTx0Id = glGetUniformLocation(progId, "uTx0");
			 if (uTx0Id >= 0) {
				 glUniform1i(uTx0Id, 0);
			 }
			
			 glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
			 glEnable(GL_BLEND);
			 glDisable(GL_DITHER);

			 glCullFace(GL_BACK);
			 glEnable(GL_CULL_FACE);
		}
		
		GLuint vertsBuf = 0;
		GLuint indexBuf = 0;
		GLuint txName   = 0;
		// Create the textured quad (vert positions then UVs)
		struct posTex2d verts2d[] = {
			{{-0.85f, -0.85f}, {0.0f, 0.0f}}, // BL
			{{ 0.85f, -0.85f}, {1.0f, 0.0f}}, // BR
			{{-0.85f,  0.85f}, {0.0f, 1.0f}}, // TL
			{{ 0.85f,  0.85f}, {1.0f, 1.0f}}, // TR
		};
		uint16_t index2d[] = {
			0, 1, 2,
			2, 1, 3,
		};
		glGenBuffers(1, &vertsBuf);
		glBindBuffer(GL_ARRAY_BUFFER, vertsBuf);
		glBufferData(GL_ARRAY_BUFFER,
			sizeof(verts2d), verts2d, GL_STATIC_DRAW);
		glVertexAttribPointer(GL_VERT_POSXY_ID, 2,
			GL_FLOAT, GL_FALSE, sizeof(struct posTex2d), 0);
		glVertexAttribPointer(GL_VERT_TXUV0_ID, 2,
			GL_FLOAT, GL_FALSE, sizeof(struct posTex2d),
				(void*) offsetof(struct posTex2d, uv0));
		glGenBuffers(1, &indexBuf);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBuf);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER,
			sizeof(index2d), index2d, GL_STATIC_DRAW);
		glEnableVertexAttribArray(GL_VERT_POSXY_ID);
		glEnableVertexAttribArray(GL_VERT_TXUV0_ID);
		
		transcoder_texture_format type = cTFRGB565;
		if (emscripten_webgl_enable_extension(glCtx, "WEBKIT_WEBGL_compressed_texture_pvrtc")) {
			printf("Has PVRTC!\n");
			type = cTFPVRTC1_4_RGB;
		} else {
			if (emscripten_webgl_enable_extension(glCtx, "WEBGL_compressed_texture_s3tc")) {
				printf("Has BC1!\n");
				type = cTFBC1;
			}
		}
		glGenTextures(1, &txName);
		if (upload(txName, srcBasis, sizeof srcBasis, type)) {
			printf("Decoded!\n");
		}
		
		emscripten_set_main_loop(tick, 0, EM_FALSE);
		emscripten_exit_with_live_runtime();
	} else {
		printf("Failed to init WebGL!\n");
	}
	return EXIT_FAILURE;
}
